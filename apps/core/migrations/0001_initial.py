# Generated by Django 4.2.5 on 2023-09-18 04:06

import apps.core.manager
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created On')),
                ('modified_on', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Modified On')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='First name')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='Middle name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Last name')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email address already exists.'}, max_length=254, unique=True, verbose_name='Email address')),
                ('phone', models.CharField(error_messages={'unique': 'A user with that mobile phone number already exists.'}, max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='Mobile phone number must be 10 digits.', regex='^\\d{10}$')], verbose_name='Mobile Phone: ')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_admin', models.BooleanField(default=False, help_text='Designates whether this user should be treated as admin user. ', verbose_name='Admin User')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', apps.core.manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created On')),
                ('modified_on', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Modified On')),
                ('otp_code', models.CharField(max_length=6)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
